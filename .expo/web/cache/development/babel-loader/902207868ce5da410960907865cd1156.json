{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useEffect } from 'react';\nimport ExpoKeepAwake from \"./ExpoKeepAwake\";\nexport var ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexport function useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  useEffect(function () {\n    activateKeepAwake(tag);\n    return function () {\n      if (options != null && options.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(function () {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\nexport function activateKeepAwake() {\n  return _activateKeepAwake.apply(this, arguments);\n}\nfunction _activateKeepAwake() {\n  _activateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.activate == null ? void 0 : ExpoKeepAwake.activate(tag);\n  });\n  return _activateKeepAwake.apply(this, arguments);\n}\nexport function deactivateKeepAwake() {\n  return _deactivateKeepAwake.apply(this, arguments);\n}\nfunction _deactivateKeepAwake() {\n  _deactivateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.deactivate == null ? void 0 : ExpoKeepAwake.deactivate(tag);\n  });\n  return _deactivateKeepAwake.apply(this, arguments);\n}","map":{"version":3,"names":["useEffect","ExpoKeepAwake","ExpoKeepAwakeTag","useKeepAwake","tag","arguments","length","undefined","options","activateKeepAwake","suppressDeactivateWarnings","deactivateKeepAwake","catch","_activateKeepAwake","apply","_asyncToGenerator","activate","_deactivateKeepAwake","deactivate"],"sources":["../src/index.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\n\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n *\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options *Optional*\n *   - `suppressDeactivateWarnings` *Optional* -\n *      The call will throw an unhandled promise rejection on Android\n *      when the original Activity is dead or deactivated.\n *      Set the value to true for suppressing the uncaught exception.\n */\nexport function useKeepAwake(\n  tag: string = ExpoKeepAwakeTag,\n  options?: {\n    suppressDeactivateWarnings: boolean;\n  }\n): void {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => {\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\n\nexport async function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,aAAa;AAEpB,OAAO,IAAMC,gBAAgB,GAAG,yBAAyB;AAgBzD,OAAM,SAAUC,YAAYA,CAAA,EAIzB;EAAA,IAHDC,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAcH,gBAAgB;EAAA,IAC9BM,OAEC,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEDP,SAAS,CAAC,YAAK;IACbS,iBAAiB,CAACL,GAAG,CAAC;IACtB,OAAO,YAAK;MACV,IAAII,OAAO,YAAPA,OAAO,CAAEE,0BAA0B,EAAE;QACvCC,mBAAmB,CAACP,GAAG,CAAC,CAACQ,KAAK,CAAC,YAAK,CAAE,CAAC,CAAC;OACzC,MAAM;QACLD,mBAAmB,CAACP,GAAG,CAAC;;IAE5B,CAAC;EACH,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;AACX;AAYA,gBAAsBK,iBAAiBA,CAAA;EAAA,OAAAI,kBAAA,CAAAC,KAAA,OAAAT,SAAA;AAAA;AAEtC,SAAAQ,mBAAA;EAAAA,kBAAA,GAAAE,iBAAA,CAFM,aAA+D;IAAA,IAA9BX,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAcH,gBAAgB;IACpE,MAAMD,aAAa,CAACe,QAAQ,oBAAtBf,aAAa,CAACe,QAAQ,CAAGZ,GAAG,CAAC;EACrC,CAAC;EAAA,OAAAS,kBAAA,CAAAC,KAAA,OAAAT,SAAA;AAAA;AASD,gBAAsBM,mBAAmBA,CAAA;EAAA,OAAAM,oBAAA,CAAAH,KAAA,OAAAT,SAAA;AAAA;AAExC,SAAAY,qBAAA;EAAAA,oBAAA,GAAAF,iBAAA,CAFM,aAAiE;IAAA,IAA9BX,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAcH,gBAAgB;IACtE,MAAMD,aAAa,CAACiB,UAAU,oBAAxBjB,aAAa,CAACiB,UAAU,CAAGd,GAAG,CAAC;EACvC,CAAC;EAAA,OAAAa,oBAAA,CAAAH,KAAA,OAAAT,SAAA;AAAA"},"metadata":{},"sourceType":"module"}